import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.datasets import fetch_california_housing

housing = fetch_california_housing(as_frame=True)
df = housing.frame

print(df.head(10)) #1

print(df.isnull().sum()) #3

X = df.drop('MedHouseVal', axis=1) #5
y = np.log(df['MedHouseVal'])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)            #4

scaler = StandardScaler()  
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

lr = LinearRegression()
lr.fit(X_train_scaled, y_train)

ridge = Ridge()
ridge.fit(X_train_scaled, y_train)
alpha = ridge.alpha
print(f'Optimal alpha: {alpha}')

y_pred = ridge.predict(X_test_scaled) #8
meanse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(meanse)
mae = mean_absolute_error(y_test, y_pred)
print(f'R-squared: {ridge.score(X_test_scaled, y_test)}')
print(f'MSE: {meanse}')
print(f'RMSE: {rmse}')
print(f'MAE: {mae}')

def ras(arr):
    def anagram(s1, s2):
        return sorted(s1) == sorted(s2)
    
    result = []
    for s in arr:
        if any(anagram(s, other) for other in arr if s != other):
            result.append(s[::-1])
        else:
            result.append(s)
    return np.array(result)

arr = np.array(["listen","gaurav","silent"])
print(ras(arr))
